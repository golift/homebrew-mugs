# typed: false
# frozen_string_literal: true

# This file was generated by GoReleaser. DO NOT EDIT.
class Unpoller < Formula
  desc "Polls a UniFi controller, exports metrics to InfluxDB, Prometheus and Datadog"
  homepage "https://unpoller.com/"
  version "2.9.1"
  license "MIT"

  on_macos do
    url "https://github.com/unpoller/unpoller/releases/download/v2.9.1/unpoller_2.9.1_darwin_all.tar.gz"
    sha256 "a864d27ed75aca8d8d230b8726a66fb548181938df67621400c40ae87bfb5f70"

    def install
      bin.install "unpoller"
      etc.mkdir "unpoller"
      etc.install "examples/up.conf" => "unpoller/up.conf.example"
    end
  end

  on_linux do
    if Hardware::CPU.intel?
      url "https://github.com/unpoller/unpoller/releases/download/v2.9.1/unpoller_2.9.1_linux_amd64.tar.gz"
      sha256 "f18972b807f5310c0d74cc54e7f96838168968bad0a6c5ba3b33605f0844c3b7"

      def install
        bin.install "unpoller"
        etc.mkdir "unpoller"
        etc.install "examples/up.conf" => "unpoller/up.conf.example"
      end
    end
    if Hardware::CPU.arm? && Hardware::CPU.is_64_bit?
      url "https://github.com/unpoller/unpoller/releases/download/v2.9.1/unpoller_2.9.1_linux_arm64.tar.gz"
      sha256 "b4359f2b7c0ab0c391e73e39bb425c8a91f6b5c5f5933d4eb57b65af5f076492"

      def install
        bin.install "unpoller"
        etc.mkdir "unpoller"
        etc.install "examples/up.conf" => "unpoller/up.conf.example"
      end
    end
    if Hardware::CPU.arm? && !Hardware::CPU.is_64_bit?
      url "https://github.com/unpoller/unpoller/releases/download/v2.9.1/unpoller_2.9.1_linux_armv6.tar.gz"
      sha256 "6c98bd3ee89d5a20d4cd8929505d678b3903df431431bfd9d6864ac2709e8538"

      def install
        bin.install "unpoller"
        etc.mkdir "unpoller"
        etc.install "examples/up.conf" => "unpoller/up.conf.example"
      end
    end
  end

  conflicts_with "unifi-poller"

  def post_install
    etc.install "examples/up.conf" => "unpoller/up.conf"
  end

  def caveats
    <<~EOS
      Edit the config file at #{etc}/unpoller/up.conf then start unpoller with brew services start unpoller ~ log file: #{var}/log/unpoller.log The manual explains the config file options: man unpoller
    EOS
  end

  service do
    run [opt_bin/"unpoller", "--config", etc/"unpoller/up.conf"]
    keep_alive true
    log_path var/"log/unpoller.log"
    error_log_path var/"log/unpoller.log"
  end

  test do
    assert_match "unpoller v#{version}", shell_output("#{bin}/unpoller -v 2>&1", 2)
  end
end
